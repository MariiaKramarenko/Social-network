{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogItem/DiialogItem.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","Message","props","className","s","message","DialogItem","path","id","dialog","to","name","reduxForm","maxLengthCreator","form","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","DiialogItem","key","massagesElements","messages","m","newMessageBody","React","createRef","values","sendMessage","compose","connect","dispatch","sendMessageCreator","withAuthRedirect"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,8ECStHC,EANC,SAACC,GACb,OACI,yBAAKC,UAAWC,IAAEC,SAAlB,IAA6BH,EAAMG,U,QCQ5BC,EAVI,SAACJ,GAEnB,IAAIK,EAAM,YAAcL,EAAMM,GAC9B,OACC,yBAAKL,UAAWC,IAAEK,QACjB,kBAAC,IAAD,CAASC,GAAIH,GAAQL,EAAMS,Q,2CCiBfC,GArBKC,YAAiB,IAqBtBD,YAAU,CAACE,KAAK,wBAAhBF,EAnBQ,SAACV,GACpB,OACG,0BAAMa,SAAUb,EAAMc,cACrB,6BACI,kBAACC,EAAA,EAAD,CACAC,UAAWC,IACXC,SAAU,CAACC,KACXV,KAAM,iBACNW,YAAa,wBAGjB,6BACI,4BAAQnB,UAAU,mBAAlB,cCoBGoB,EA7BC,SAACrB,GAGb,IAAIsB,EAAQtB,EAAMuB,YACdC,EAAkBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAI,kBAACC,EAAD,CAAcnB,KAAMkB,EAAElB,KAAMoB,IAAKF,EAAErB,GAAIA,GAAIqB,EAAErB,QAEvFwB,EAAmBR,EAAMS,SAASL,KAAK,SAAAM,GAAC,OAAI,kBAAC,EAAD,CAAS7B,QAAU6B,EAAE7B,QAAU0B,IAAKG,EAAE1B,QACjEgB,EAAMW,eACHC,IAAMC,YAOjC,OACC,6BACM,yBAAKlC,UAAWC,IAAEuB,SACjBD,GAEA,yBAAKvB,UAAWC,IAAE6B,UACjBD,EACE,kBAAC,EAAD,CAAgBjB,SAXJ,SAACuB,GACjBpC,EAAMqC,YAAYD,EAAOH,sB,uBCuBlBK,sBACbC,aAlCmB,SAACjB,GACnB,MAAO,CACJC,YAAaD,EAAMC,gBAIA,SAACiB,GACtB,MAAO,CACJH,YAAa,SAACJ,GACbO,EAASC,YAAmBR,SA0BnCS,IAFcJ,CAGXjB","file":"static/js/4.6704272f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__9pTr6\",\"dialog\":\"Dialogs_dialog__1LeSM\",\"messages\":\"Dialogs_messages__1zqfK\",\"message\":\"Dialogs_message__3jnJn\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\n\r\nconst Message = (props) =>{\r\n    return(\r\n        <div className={s.message}> {props.message}</div>\r\n    \t)\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nconst DialogItem = (props) => {\r\n    \r\n\tlet path =\"/dialogs/\" + props.id;\r\n\treturn(\r\n\t\t<div className={s.dialog}>\r\n\t\t\t<NavLink to={path} >{props.name}</NavLink>\r\n\t\t</div> \r\n\t)\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {required, maxLengthCreator} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) =>{\r\n    return(\r\n       <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field \r\n            component={Textarea} \r\n            validate={[required,]}\r\n            name={\"newMessageBody\"} \r\n            placeholder={\"Enter your message\"} />\r\n        </div>\r\n     \r\n        <div>\r\n            <button className=\"btn btn-primary\">Send</button>\r\n        </div>\r\n    \r\n    </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm({form:\"dialogAddMessageForm\"})(AddMessageForm);","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink,Redirect} from 'react-router-dom';\r\nimport Message from './Message/Message';\r\nimport DiialogItem from './DialogItem/DiialogItem';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\n\r\n\r\n\r\nconst Dialogs = (props) => {/*константа отвечающая за отлисовку диалогов*/\r\n     \r\n\r\n    let state = props.dialogsPage;/*получаем dialogsPage из пропсов */\r\n    let dialogsElements = state.dialogs.map( d => <DiialogItem  name={d.name} key={d.id} id={d.id} /> );\r\n    /*получаем диалогайтемсы путем мапинга(перерисовки массива данных в jsx посты)*/\r\n    let massagesElements = state.messages.map( m => <Message message ={m.message}  key={m.id} />);\r\n    let newMessageBody = state.newMessageBody; \r\n    let newMessageElement = React.createRef();/*создаем ссылку которая ссылается на текстареа*/\r\n\r\n\r\n    let addNewMessage = (values) => {/*функция добавляет сообщение по срабатыванию onSubmit*/\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n\treturn(\t   \r\n\t\t<div>\t\r\n        <div className={s.dialogs}>\t\t\t\r\n        {dialogsElements}              \r\n        </div>\r\n         <div className={s.messages}>\r\n         {massagesElements}\r\n            <AddMessageForm onSubmit={addNewMessage} />   \r\n           </div>\r\n        </div>\t\r\n\t\t)\r\n}\r\n/*обращаемся к AddMessageFormRedux и говорим,когда ты засабмтишься выполни функцию ={}*/\r\n\r\nexport default Dialogs;","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport {NavLink} from 'react-router-dom';\r\nimport Message from './Message/Message';\r\nimport DialogItem from './DialogItem/DiialogItem';\r\nimport {sendMessageCreator} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\n/*этими двумя функциями мы настраиваем наш connect */\r\nlet mapStateToProps =(state)=>{/* тут присваиваем свойства ,цель-превратить часть стейта в пропсы для компоненты*/\r\n   return {\r\n      dialogsPage: state.dialogsPage\r\n   }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {/*тут передадим коллбеки коллбеки*/\r\n    return {\r\n       sendMessage: (newMessageBody) => { \r\n        dispatch(sendMessageCreator(newMessageBody));      \r\n       }\r\n    }\r\n}\r\n\r\n\r\n/*закомментированная логика ниже заменена на функцию compose*/\r\n\r\n/*let AuthRedirectComponent = withAuthRedirect(Dialogs);/*оборачиваем в хок компоненту Dialogs в хоку будет происходить редирект\r\nна логин если isAuth:false*/\r\n\r\n/*connect-возвращает нам новую контейнерную компоненту*/\r\n/*const DialogsContainer = connect(mapStateToProps,mapDispatchToProps)(AuthRedirectComponent);/*вызываем функцию два раза она создает контейнерную компоненту \r\nи внутри вызывает переданную ей во вторых скобках-презентационную*/\r\n/*библиотека connect вернет нам в этом случае функциональную компоненту для нашей презентационной Dialogs\r\nто есть нам уже не нужно создавать контейнерные компоненты вручную,за нас это сделает connect\r\n\r\nпервым вызовом этой функции мы кк бы настраиваем нашу контейнерную компоненту\r\n\r\nвнутырь презентационной компоненты в качестве пропсов будут переданы f1 f2 \r\nи соответсвенно свойства которые  сидят в этих объектах\r\n*/\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps,mapDispatchToProps),\r\n withAuthRedirect\r\n  )(Dialogs);/*функция компоуз-берет Dialogs закидывает в withAuthRedirect и полученный результат закидывает в connect*/\r\n"],"sourceRoot":""}