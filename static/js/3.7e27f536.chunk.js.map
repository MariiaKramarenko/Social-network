{"version":3,"sources":["components/Profile/Profile.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCount","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","validate","required","placeholder","name","component","Textarea","MyPosts","React","memo","console","log","postsElements","posts","map","p","postsBlock","myposts","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","onBlur","updateStatus","autoFocus","ProfileInfo","profile","descriptionBlock","photos","large","Preloader","Profile","ProfileContainer","userID","this","match","params","autorizedUserId","history","push","getUserProfile","getStatus","isAuth","to","Component","compose","auth","userId","withRouter","withAuthRedirect"],"mappings":"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","file":"static/js/3.7e27f536.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileimg\":\"Profile_profileimg__1DP71\",\"descriptionBlock\":\"Profile_descriptionBlock__TBKSn\",\"postsBlock\":\"Profile_postsBlock__XYymL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2di3J\",\"item\":\"MyPosts_item__3Bzdm\",\"myposts\":\"MyPosts_myposts__2NO3M\",\"addpost\":\"MyPosts_addpost__2E61B\",\"mypost\":\"MyPosts_mypost__MsxjG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__2P32R\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileimg\":\"ProfileInfo_profileimg__7SOky\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3fFzv\",\"postsBlock\":\"ProfileInfo_postsBlock__3Z_gu\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post =(props) =>{\r\n\treturn (            \r\n              <div className={s.item}>\r\n              <img src=\"https://image.flaticon.com/icons/svg/2602/2602014.svg\"/>\r\n              {props.message}\r\n              <div>\r\n              <span>Likes  {props.likesCount}</span> \r\n              </div>             \r\n              </div>        \r\n    \r\n\t\t)\r\n}\r\n export default Post;","import React, {PureComponent} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport {Field, reduxForm} from 'redux-form';\r\nimport {required, maxLengthCreator} from '../../../utils/validators/validators';\r\nimport {Textarea} from '../../common/FormsControls/FormsControls';\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(1000);/*криетор проверки формы на длину символов*/\r\n\r\nconst AddNewPostForm = (props) =>{/*выносим форму в отдельную компоненту*/\r\n return (\r\n         <form  onSubmit={props.handleSubmit}>\r\n            <div>\r\n              <Field className=\"form-control\" validate={[required, maxLength10]} placeholder={\"Send your post\"} name={\"newPostText\"} component={Textarea}/>\r\n            </div>\r\n            <div>\r\n              <button className=\"btn btn-primary\">Add post</button>\r\n            </div>\r\n          </form>\r\n          )\r\n}\r\n/*форма созданная с помощью редакс форм-то есь обернутая в хук редаксФорм*/\r\nconst AddNewPostFormRedux = reduxForm({form:\"ProfileAddNewPostForm\"}) (AddNewPostForm);/*оборачиваем форму в хок редакс формы*/\r\n\r\nconst MyPosts = React.memo(props=> {/*React.memo - hok,на входе принимает одну компоненту,а \r\n на выходе возвращает другую,ту которую вернет memo\r\n то есть делается проверка входных данных в компоненту и сравнение с текущими ее данными*/\r\n \r\n  console.log(\"RENDER YO\");\r\n\r\nlet postsElements = /*орисовываем (мапим) посты путем преобразования массива posts в jsx элемент*/\r\n    props.posts.map( p =>\r\n      <Post message={p.message} likesCount={p.likesCount}/>\r\n      );\r\nlet onAddPost = (values) => {/*функция добавления поста на стену*/\r\n   props.addPost(values.newPostText);/*вызываем коллбек который задиспатчит значение нового поста пришедшее из onSubmit*/\r\n   \r\n }\r\n  return(\r\n    <div className={s.postsBlock}>\r\n\r\n         <div  className={s.myposts}>\r\n              My posts\r\n         </div>\r\n        <AddNewPostFormRedux onSubmit={onAddPost}/>          \r\n          {postsElements}\r\n      </div>\r\n  \t)\r\n\r\n});\r\n\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport {addPostActionCreator, updateNewPostTextActionCreator} from './../../../redux/profile-reducer';\r\n/*импортируем экшнкриейторы так как тут мы через них обращаемся к стейту и выполняем действия*/\r\nimport MyPosts from './MyPosts';\r\nimport Post from './Post/Post';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nlet mapStateToProps = (state) => {/*прокидываем пропсы в эту компоненту из стейта*/\r\n  return {\r\n    posts: state.profilePage.posts,\r\n    newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => {/*вызываем действия с помощью прокинутых коллбеков*/\r\n  return {\r\n    addPost: (newPostText) => {/*добавляем пост на стену-вызываем редьюсер*/\r\n      dispatch(addPostActionCreator(newPostText));\r\n    }\r\n    \r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect (mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\nexport default MyPostsContainer;","import React, {useState, useEffect} from 'react';\r\n\r\n\r\n\r\nconst  ProfileStatusWithHooks =(props)=> {/*создаем функцию Хук*/\r\n/*КАК СКОНСТРУИРОВАН ЮЗ СТЕЙТ:\r\n\r\nuseStete-функция кот гворит сама за себя - \"использовать стейт локальный\" и возвращает массив из двух элементов\r\nперве значение-стартовое значение стейта*/\r\n\r\n\r\n/*let stateWithUseState = useState(false);/*использовать стейт стейт хуковский/ false-начальное значение*/\r\n/*let editMode = stateWithUseState[0];/*возвратили первое значение стейта-false*/\r\n/*let seteditMode = stateWithUseState[1];/*второе значение-функция кот будет менять первое значение*/\r\n/*/////////////////\r\ndestruction\r\nlet arr = [0, () =>{}]; /*массив в кот первое знач - и второек-функция,кот его изменяет */\r\n/*let [a, setA] = arr;/*/\r\n\r\n\r\n\r\n/*деструктурирующее присваивание-\r\n в первый элемент массива засунем первый элемент из массива\r\n  во второй-второй(в нашем случае useState-возвращает массив где первое его значение-\r\n  это значение локального стейта по умолчанию,\r\n  а второе-функция кот будет его менять)*/\r\n\r\n\r\n/*применим это на нашем useState*/\r\nlet [editMode, setEditMode] = useState(false);/*объявляем юз стейт(помним,что это массив) с помощью деструктурирующего присваивания*/\r\nlet [status, setStatus] = useState(props.status);/*концепция хуков-делайте много локальных стейтов,\r\nпоэтому деаем такой же стейт для передачи статуса и в последствии его изменений с пом функции кот сидит как второй параметр*/\r\n\r\n\r\n/*useEffect -синхронизация состояния компоненты*/\r\nuseEffect(()=>{\r\n   setStatus(props.status);\r\n}, [props.status]);/*принимает функцию кот отрисовывается когда компонента отрисуется \r\n[props.status] - то от чего зависит перерисовка useEffect\r\n*/\r\n\r\nconst activateEditMode = () =>{/*функция,меняющая по клику дефолтное значение в массиве useState посредством вызова второго парметра-функции */\r\n   setEditMode(true);/*меняем значение с пом вызова функции*/\r\n}\r\n\r\n\r\nconst deactivateEditMode = () =>{/*функция,меняющая по клику значение editMode на false посредством вызова \r\n  второго парметра массива useState -функции кот будет менять первое значение*/\r\n   setEditMode(false);/*меняем значение с пом вызова функции*/\r\n   props.updateStatus(status);/*отправляем на сервер настоящее значение статуса кот было введено в инпуте*/\r\n}\r\n\r\nconst onStatusChange = (e) =>{/*устанавливаем значение статуса по клику на input и его изменение - с пом функции второго парметра*/\r\n       setStatus(e.currentTarget.value); /*берем значение из нативного html*/\r\n}\r\n\r\n\r\nreturn(\r\n<div>\r\n  {!editMode && /*если значение false &&-тогда выполняет логику с пом. аттрибута onDoubleClick вызываем метод класса*/\r\n  <div>\r\n    <span onDoubleClick={activateEditMode}> {props.status || \"no status\"}</span>\r\n  </div>\r\n  }\r\n  {editMode && /*если значение true &&-тогда выполняем логику посредством аттрибута onBlur- при фокусе срабатывает метод класса*/\r\n  <div>\r\n    <input onChange={onStatusChange} onBlur={deactivateEditMode} autoFocus={true} value={status}/>\r\n  </div>\r\n  }\r\n</div>\r\n)\r\n}\r\nexport default ProfileStatusWithHooks;","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../.././common/Preloader/Preloader.jsx'; \r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n   if (!props.profile) {\r\n      return <Preloader/>\r\n   } \r\n\treturn (\r\n         <div className={s.postsBlock}>\r\n   \t\t\t<div className={s.descriptionBlock}>\r\n               <img src={props.profile.photos.large} />\r\n                  <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n   \t\t\t</div>\r\n         </div>         \r\n\t\t)\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\r\n\r\nconst Profile = (props) => {\r\n\r\nreturn (\r\n   <div>\r\n   <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n\r\n   <MyPostsContainer />\r\n   </div>\r\n\t)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport s from './Profile.module.css';\r\nimport Profile from './Profile';\r\nimport {connect} from 'react-redux';\r\nimport * as axios from 'axios';\r\nimport {getUserProfile, getStatus, updateStatus} from '../../redux/profile-reducer';\r\nimport {withRouter, Redirect} from 'react-router-dom';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n/*все пропсы контейнерной приходят в ее дочернюю-презентационную,передать все пропсы можно способом {...this.props.} */\r\n\r\n   componentDidMount() {\r\n    let userID = this.props.match.params.userID;\r\n    if(!userID) {/*если мы не кликнули по пользователю,то загрузим автар нашего2го пользователя -это Димыч*/\r\n      userID = this.props.autorizedUserId;\r\n      if(!userID){\r\n        this.props.history.push(\"/login\");\r\n      }\r\n    }\r\n    this.props.getUserProfile(userID);/*запрашиваем профиль юзера*/\r\n    this.props.getStatus(userID);/*запрашиваем статус юзера*/\r\n   }\r\n\r\n   render() {\r\n      if (this.props.isAuth == false) return <Redirect to='/login' />\r\n       return (\r\n        <Profile {...this.props} \r\n        profile={this.props.profile} \r\n        status={this.props.status} \r\n        updateStatus={this.props.updateStatus}/>)\r\n    }\r\n}\r\n\r\n/*обязательно,когда наша функция возвращает объект,мы должны ставить круглые скобки*/\r\n/*let mapStateToProps = (state) => ({\r\n\tprofile: state.profilePage.profile,/*прокидываем профиль сюда пропсами из стейта*/\r\n  /*status:state.profilePage.status,/*прокидываем статус пропсами сюда из стейта*/\r\n /* autorizedUserId: state.auth.userId,/*узнаем мой айди для высвечивания моего профиля в случае если кликнутого нет*/\r\n  /*isAuth:state.auth.isAuth/*взяли чтобы знать сост авторизации для высвечиванияпрофиля в условии когда того на кого мы кликнули нет */\r\n/*});*/\r\n\r\nlet mapStateToProps = (state) => ({\r\nprofile: state.profilePage.profile,\r\nstatus:state.profilePage.status,\r\nautorizedUserId: state.auth.userId,\r\nisAuth:state.auth.isAuth\r\n});\r\n\r\n\r\n\r\nexport default compose(/*функция компоуз берет ProfileContainer оборачивает в withAuthRedirect \r\n  результат этого оборачивает в withRouter\r\n  результат этого оборачивает в connect*/\r\n  connect(mapStateToProps,{getUserProfile, getStatus, updateStatus}),\r\n  withRouter,\r\n  withAuthRedirect\r\n  )(ProfileContainer);\r\n\r\n"],"sourceRoot":""}